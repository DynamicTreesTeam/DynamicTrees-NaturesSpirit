plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
//    id 'org.sinytra.adapter.userdev' version '1.2.1-SNAPSHOT'
    id("org.sinytra.adapter.userdev") version "1.2.1-SNAPSHOT"
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    flatDir {
        dirs("libs")
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Sinytra"
        url = "https://maven.su5ed.dev/releases"
    }
    maven {
        url "https://harleyoconnor.com/maven"
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//sourceSets {
//    onlyMain {
//    }
//}

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id

//            sourceSet = sourceSets.onlyMain
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    additionalRuntimeClasspath  "curse.maven:sinytra-connector-890127:6237027"
    runtimeOnly "curse.maven:connector-extras-913445:5618470"
    runtimeOnly "curse.maven:forgified-fabric-api-889079:6136650"
    runtimeOnly "maven.modrinth:natures-spirit:2.2.1-1.21.1"
    runtimeOnly "curse.maven:terrablender-neoforge-940057:6054947"

    implementation "curse.maven:dynamictrees-252818:6196673"

    implementation("curse.maven:jei-238222:5606861")
//    implementation ("curse.maven:jade-324717:4654448")
    implementation("curse.maven:jade-324717:5591256-deobf-sources-api")

    runtimeOnly("curse.maven:irisshaders-455508:6117625")
    runtimeOnly "maven.modrinth:sodium:mc1.21.1-0.6.9-neoforge"

    runtimeOnly("curse.maven:journeymap-32274:5541925")

//    implementation "curse.maven:natures-spirit-1044992:6201808"

    println("----Scan onlyMainRuntimeOnly libs begin----")
    fileTree(dir: 'libs', include: ['*.jar']).each { File file ->
        def fileName = file.name
        println(fileName.substring(0, fileName.indexOf("-")) + "," + fileName.substring(fileName.indexOf("-") + 1, fileName.indexOf(".jar")))
        runtimeOnly(name: fileName.substring(0, fileName.indexOf(".jar")),
                group: 'libs',
                version: fileName.substring(0, fileName.indexOf(".jar")))
    }
    println("----Scan onlyMainRuntimeOnly libs end----")
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

tasks.register('deleteCache') {
    delete 'src/generated/resources/.cache'
}

jar.dependsOn deleteCache

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
//idea {
//    module {
//        downloadSources = true
//        downloadJavadoc = true
//    }
//}
